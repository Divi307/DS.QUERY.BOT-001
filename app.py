from flask import Flask, render_template, request, jsonify
import os
from datetime import datetime
import google.generativeai as genai
import cohere

# Load environment variables (for API keys)
COHERE_API_KEY = os.getenv("COHERE_API_KEY") or "your-cohere-api-key"

# Initialize Gemini & Cohere
co = cohere.Client(COHERE_API_KEY)

app = Flask(__name__)

# Home route
@app.route('/')
def home():
    return render_template("index.html")


# Format prompt based on selected style and language
def format_prompt(prompt_type, topic_or_prompt, language="english"):
    language = language.strip().lower()
    prompt_type = prompt_type.strip().lower()

    if language not in ["english", "hindi"]:
        language = "english"

    if prompt_type == "deep":
        if language == "english":
            return (
                f"Write a detailed, in-depth analysis essay of at least 400 words on the topic: \"{topic_or_prompt}\".\n"
                "Include background, key concepts, real-world applications, and important facts. "
                "Use formal tone and clear structure. Avoid repetition and general statements."
            )
        elif language == "hindi":
            return (
                f"‡§µ‡§ø‡§∑‡§Ø \"{topic_or_prompt}\" ‡§™‡§∞ ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 400 ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§ó‡§π‡§® ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£‡§æ‡§§‡•ç‡§Æ‡§ï ‡§®‡§ø‡§¨‡§Ç‡§ß ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§\n"
                "‡§â‡§∏‡§ï‡§æ ‡§á‡§§‡§ø‡§π‡§æ‡§∏, ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§§‡§§‡•ç‡§µ, ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§ú‡•Ä‡§µ‡§® ‡§Æ‡•á‡§Ç ‡§â‡§™‡§Ø‡•ã‡§ó ‡§î‡§∞ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§§‡§•‡•ç‡§Ø ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§ "
                "‡§≠‡§æ‡§∑‡§æ ‡§î‡§™‡§ö‡§æ‡§∞‡§ø‡§ï ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è ‡§î‡§∞ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§π‡•ã‡§®‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è‡•§ ‡§¶‡•ã‡§π‡§∞‡§æ‡§µ ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§"
            )

    elif prompt_type == "brief":
        if language == "english":
            return (
                f"Explain the topic \"{topic_or_prompt}\" in **no more than 3 lines**. "
                "Be concise, avoid fluff, and provide the essence of the concept only."
            )
        elif language == "hindi":
            return (
                f"‡§µ‡§ø‡§∑‡§Ø \"{topic_or_prompt}\" ‡§ï‡•ã **‡§ï‡•á‡§µ‡§≤ 3 ‡§™‡§Ç‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç** ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§î‡§∞ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡•á‡§™ ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§á‡§è‡•§ "
                "‡§Ö‡§®‡§æ‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§ï‡•á‡§µ‡§≤ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§¨‡§æ‡§§ ‡§¨‡§§‡§æ‡§è‡§Ç‡•§"
            )

    elif prompt_type == "custom":
        if language == "english":
            return topic_or_prompt
        elif language == "hindi":
            return f"‡§á‡§∏ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¶‡•Ä‡§ú‡§ø‡§è:\n{topic_or_prompt}"

    # Fallback (in case prompt_type is invalid)
    return f"Explain this in a helpful way: {topic_or_prompt}"


# Generate summary using Cohere
def generate_summary(query):
    try:
        cohere_response = co.generate(
            model='command-r-plus',
            prompt=query,
            max_tokens=2000,
            temperature=0.7,
            stop_sequences=["--END--"]
        )
        print("‚úÖ Cohere succeeded.")
        return cohere_response.generations[0].text.strip()
    except Exception as cohere_error:
        print("‚ùå Cohere failed:", cohere_error)
        raise Exception("Cohere failed.")


# Summarize API
@app.route('/summarize', methods=['POST'])
def summarize():
    data = request.get_json()
    query = data.get("query", "").strip()
    style = data.get("style", "custom")
    language = data.get("language", "english")

    if not query:
        return jsonify({"error": "‚ùå Query is missing"}), 400

    try:
        final_prompt = format_prompt(style, query, language)
        summary = generate_summary(final_prompt)

        # Save to log
        with open("queries.log", "a", encoding="utf-8") as f:
            f.write(f"\n\n=== {datetime.now()} ===\nStyle: {style}\nLanguage: {language}\nQuery: {query}\n\nSummary: {summary}\n")

        return jsonify({"summary": summary})
    except Exception as e:
        print("üî• Error while summarizing:", e)
        return jsonify({"error": str(e)}), 500


# Run server
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    print(f"üöÄ Server running on: http://127.0.0.1:{port}")
    app.run(host="0.0.0.0", port=port, debug=True)